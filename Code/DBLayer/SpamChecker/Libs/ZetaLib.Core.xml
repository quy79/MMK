<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZetaLib.Core</name>
    </assembly>
    <members>
        <member name="T:ZetaLib.Core.Base.IApplicationEnvironment">
            <summary>
            Provide an environment to the classes.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.IApplicationEnvironment.Pump">
            <summary>
            Pumps the GUI, to stay responsive.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.IApplicationEnvironment.Pump(System.String)">
            <summary>
            Pumps the GUI, to stay responsive.
            Overload with optional message to pass.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Base.ConsoleBase">
            <summary>
            Base class for console applications.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Base.GenericBase">
            <summary>
            Generic base class for applications.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.GenericBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.GenericBase.HandleApplicationError(System.Exception)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:ZetaLib.Core.Base.GenericBase.ApplicationEnvironment">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Base.GenericBase.MagicKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Base.ILibraryConfiguration">
            <summary>
            Interface for library-specific configurations.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.ILibraryConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads this class form the given configuration node.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Base.LibraryConfigurationBase">
            <summary>
            Generic base class for library-specific configurations.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Base.TaskCommand">
            <summary>
            The command of a task. A task can have one or multiple task commands
            that are usually closely related to each other.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskCommand.#ctor">
            <summary>
            Constructor. Constructs an empty task command.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskCommand.#ctor(System.String)">
            <summary>
            Constructor. Constructs a task command with a
            given symbolic name.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskCommand.#ctor(System.String,System.String)">
            <summary>
            Constructor. Constructs a task command with a
            given symbolic name and a description.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Base.TaskCommand.SymbolicName">
            <summary>
            The symbolic name that is used to call the task command.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Base.TaskCommand.Description">
            <summary>
            The description that describes the task command.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Base.TaskBase">
            <summary>
            Base class for tasks.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.DispatchTasks(System.String[])">
            <summary>
            Pass a string with one or several commands and 
            executes these tasks successive.
            </summary>
            <param name="rawCommands">Usually this is the raw command
            line to a console application that is passed to this function.</param>
            <returns>Returns the number of executed tasks.</returns>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.ExecuteTask(System.String)">
            <summary>
            Execute a single task by command name.
            </summary>
            <returns>Returns TRUE if found and executed, 
            FALSE otherwise.</returns>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.GetTask(System.String)">
            <summary>
            Use Reflection to generate an instance of a class derived
            from this class.
            </summary>
            <param name="commandSymbolicName">The command of the class.</param>
            <returns>Returns instance if found, returns null if not found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.DoGetTask(System.Reflection.Assembly,System.String)">
            <summary>
            Helper function for retrieving a task.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.DoGetTask(System.Reflection.Assembly,System.String,System.Int32)">
            <summary>
            Helper function for retrieving a task.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.Process(ZetaLib.Core.Base.TaskCommand)">
            <summary>
            Do your main processing here.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.GetCommandFromRawCommand(System.String)">
            <summary>
            Get a task command from a given rawCommand.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.PumpLog(System.String)">
            <summary>
            Log and pump the GUI. also calls the LogEvent delegate
            if assigned.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.PumpLogWarning(System.String)">
            <summary>
            Log and pump the GUI. also calls the LogEvent delegate
            if assigned.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.PumpLogWarning(System.String,System.Exception)">
            <summary>
            Log and pump the GUI. also calls the LogEvent delegate
            if assigned.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.PumpLogError(System.String)">
            <summary>
            Log and pump the GUI. also calls the LogEvent delegate
            if assigned.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Base.TaskBase.PumpLogError(System.String,System.Exception)">
            <summary>
            Log and pump the GUI. also calls the LogEvent delegate
            if assigned.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Base.TaskBase.AllTask">
            <summary>
            Uses Reflection to generate a list of all classes
            derived from this class.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Base.TaskBase.IsActive">
            <summary>
            If returned FALSE, the task is not accessible from outside.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Base.TaskBase.IsDefaultTask">
            <summary>
            If returned TRUE, the task is the default task.
            Only ONE active task can be the default task.
            The default tasks is executed if no parameters are specified.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Base.TaskBase.Command">
            <summary>
            Provide a mandatory command name string. E.g. "import-frida-data".
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Base.TaskBase.Commands">
            <summary>
            Provide multiple command name strings. Optional. If a
            task does not provide multiple strings, this function
            can return 'null' or the same as 'CommandName'.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Base.TaskBase.Description">
            <summary>
            Provide an optional description of the task.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Caching.PerRequestWebCache">
            <summary>
            Caching on a per-request-basis.
            See http://216.239.59.104/search?q=cache:loel8inOgoIJ:msdn.microsoft.com/msdnmag/issues/05/01/ASPNETPerformance/default.aspx+ASP.NET+per-request-caching
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Caching.PerRequestWebCache.Item(System.String)">
            <summary>
            Read from and write to the cache.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Caching.WebCache">
            <summary>
            Provide an extended version of System.Web.Caching.Cache.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Caching.WebCache.currentWebCache">
            <summary>
            The reference to the actual value.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Caching.WebCache.Initialize">
            <summary>
            Initialize the class.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Caching.WebCache.RemoveAll">
            <summary>
            Empties the complete cache.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Caching.WebCache.RemoveAll(System.String)">
            <summary>
            Removes all items from the cache with
            a certain prefix in the key.
            </summary>
            <param name="prefix">The prefix of the keys to remove.</param>
        </member>
        <member name="M:ZetaLib.Core.Caching.WebCache.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Caching.WebCache.Insert(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="P:ZetaLib.Core.Caching.WebCache.Current">
            <summary>
            Access the singleton.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Caching.WebCache.Item(System.String)">
            <summary>
            Read from and write to the cache.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Caching.WebCache.PerRequest">
            <summary>
            Caching items on a per-request-basis.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Caching.WebCache.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.ArgumentParser">
            <summary>
            Persing of arguments.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ArgumentParser.#ctor(System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.ArgumentParser.Has(System.String)">
            <summary>
            Checks for the presence of a name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ZetaLib.Core.Common.CompressionHelper">
            <summary>
            Routines for compressing and decompressing various
            types of data.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this class.
            </remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressFolder(System.String)">
            <summary>
            Compress a folder with multiple files and subfolders with 
            the ZIP algorithm. Use the DecompressFolder() routine to
            decompress the compressed bytes.
            </summary>
            <param name="folderPath">The path to the folder
            that will be compressed.</param>
            <returns>Returns the compressed folder contents.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressFiles(System.String[])">
            <summary>
            Compress multiple files with the ZIP algorithm. 
            Use the DecompressFiles() routine to decompress the compressed bytes.
            </summary>
            <param name="filePaths">The list of all files to 
            compress.</param>
            <returns>Returns the compressed files contents.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressFile(System.String)">
            <summary>
            Compress a file with the ZIP algorithm.
            Use the DecompressFile() routine to decompress the compressed bytes.
            </summary>
            <param name="filePath">The file to compress.</param>
            <returns>Returns the compressed file content.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Compress a XML document with the ZIP algorithm.
            Use the DecompressXmlDocument() routine to decompress 
            the compressed bytes.
            </summary>
            <param name="input">The XML document to compress.</param>
            <returns>Returns the compressed XML document.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressString(System.String)">
            <summary>
            Compress a string with the ZIP algorithm.
            Use the DecompressString() routine to decompress the compressed bytes.
            </summary>
            <param name="input">The string to compress.</param>
            <returns>Returns the compressed string.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressString(System.String,System.String)">
            <summary>
            Compress a string with the ZIP algorithm.
            Use the DecompressString() routine to decompress the compressed bytes.
            </summary>
            <param name="input">The string to compress.</param>
            <param name="fileName">The name of the file to store the string in
            the zip archive.</param>
            <returns>Returns the compressed string.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressStrings(ZetaLib.Core.Common.CompressionHelper.CompressStringsInfo)">
            <summary>
            Compress multiple stringPairs with the ZIP algorithm.
            Use the DecompressStrings() routine to decompress the compressed bytes.
            </summary>
            <param name="info">The stringPairs to compress.</param>
            <returns>Returns the compressed stringPairs.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenous(ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos)">
            <summary>
            Compress multiple items with the ZIP algorithm.
            </summary>
            <param name="infos">The items to compress.</param>
            <returns>Returns the compressed items.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressDataSet(System.Data.DataSet)">
            <summary>
            Compress a DataSet with the ZIP algorithm.
            Use the DecompressDataSet() routine to decompress the compressed bytes.
            </summary>
            <param name="input">The DataSet to compress.</param>
            <returns>Returns the compressed DataSet.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressBytes(System.Byte[])">
            <summary>
            Compress a byte array with the ZIP algorithm.
            Use the DecompressBytes() routine to decompress the compressed bytes.
            </summary>
            <param name="input">The bytes to compress.</param>
            <returns>Returns the compressed bytes.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressBytes(System.Byte[],System.String)">
            <summary>
            Compress a byte array with the ZIP algorithm.
            Use the DecompressBytes() routine to decompress the compressed bytes.
            </summary>
            <param name="input">The bytes to compress.</param>
            <param name="fileName">The name of the byte stream in the zip file.</param>
            <returns>Returns the compressed bytes.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressFolder(System.Byte[],System.String)">
            <summary>
            Decompress a byte stream that was formerly compressed
            with the CompressFolder() routine with the ZIP algorithm 
            and store it to a folder.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the files and subfolders.</param>
            <param name="folderPath">The base path where the files and folders
            will be stored.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressFiles(System.Byte[],System.String)">
            <summary>
            Decompress a byte stream that was formerly compressed
            with the CompressFiles() routine with the ZIP algorithm 
            and store it to a file.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the files.</param>
            <param name="folderPath">The base path where the files will be 
            stored.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressItems(System.Byte[])">
            <summary>
            Decompress a byte stream that was formerly compressed
            with the ZIP algorithm.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the items.</param>
            <returns>Returns the decompressed item(s).</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressFile(System.Byte[],System.String)">
            <summary>
            Decompress a byte stream that was formerly compressed
            with the CompressFile() routine with the ZIP algorithm and 
            store it to a file.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the file.</param>
            <param name="filePath">The file path where the file will be 
            stored.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressXmlDocument(System.Byte[])">
            <summary>
            Decompress a byte stream of an XML document that was formerly
            compressed with the CompressXmlDocument() routine with 
            the ZIP algorithm.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the XML document.</param>
            <returns>Returns the decompressed XML document.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressString(System.Byte[])">
            <summary>
            Decompress a byte stream of a string that was formerly 
            compressed with the CompressString() routine with the ZIP algorithm.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the string.</param>
            <returns>Returns the decompressed string.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressDataSet(System.Byte[])">
            <summary>
            Decompress a byte stream of a DataSet that was formerly 
            compressed with the CompressDataSet() routine with the ZIP algorithm.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the DataSet.</param>
            <returns>Returns the decompressed DataSet.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressBytes(System.Byte[])">
            <summary>
            Decompress a byte stream that was formerly compressed
            with the CompressBytes() routine with the ZIP algorithm.
            </summary>
            <param name="input">The buffer that contains the compressed
            stream with the bytes.</param>
            <returns>Returns the decompressed bytes.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DoCompressFolder(System.IO.MemoryStream,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,ICSharpCode.SharpZipLib.Checksums.Crc32,System.String,System.String)">
            <summary>
            Helper routine for recursive compressing a folder.
            </summary>
            <param name="buf">The buffer to write to.</param>
            <param name="zip">The associated ZIP stream to write to.</param>
            <param name="crc">The associated CRC object.</param>
            <param name="baseFolderPath">The path of the initial folder.</param>
            <param name="currentFolderPath">The path of the current folder to process.</param>
        </member>
        <member name="T:ZetaLib.Core.Common.CompressionHelper.CompressStringsInfo">
            <summary>
            Info class for compressing multiple strings.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressStringsInfo.AddString(System.String)">
            <summary>
            Add a string with an auto-generated filename.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressStringsInfo.AddString(System.String,System.String)">
            <summary>
            Add a string with a provided filename.
            </summary>
            <param name="content"></param>
            <param name="fileName"></param>
        </member>
        <member name="P:ZetaLib.Core.Common.CompressionHelper.CompressStringsInfo.InternalStringPairs">
            <summary>
            Used internally only.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo">
            <summary>
            Info class for compressing a single miscellaneous source.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.Type">
            <summary>
            The type contained.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.Content">
            <summary>
            Depending on the InfoType.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.FilePath">
            <summary>
            Depending on the InfoType.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.Bytes">
            <summary>
            Depending on the InfoType.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.InfoType">
            <summary>
            The type contained.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.InfoType.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.InfoType.File">
            <summary>
            A file.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo.InfoType.Bytes">
            <summary>
            A byte-array.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos">
            <summary>
            Info class for compressing multiple miscellaneous sources.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.Add(ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfo)">
            <summary>
            Add a definition.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.AddFile(System.String)">
            <summary>
            Add a file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.AddFiles(System.String[])">
            <summary>
            Add multiple files.
            </summary>
            <param name="filePaths"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.AddString(System.String)">
            <summary>
            Add a string with an auto-generated filename.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.AddString(System.String,System.String)">
            <summary>
            Add a string with a provided filename.
            </summary>
            <param name="content"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.AddBytes(System.Byte[])">
            <summary>
            Add a byte[] with an auto-generated filename.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.AddBytes(System.Byte[],System.String)">
            <summary>
            Add a byte[] with a provided filename.
            </summary>
            <param name="content"></param>
            <param name="fileName"></param>
        </member>
        <member name="P:ZetaLib.Core.Common.CompressionHelper.CompressHeterogenousInfos.InternalItems">
            <summary>
            Used internally only.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.CompressionHelper.DecompressedItemInfo">
            <summary>
            Info about a decompressed item.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.CompressionHelper.DecompressedItemInfo.#ctor(System.Byte[],System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="decompressedBytes"></param>
            <param name="fileName"></param>
        </member>
        <member name="P:ZetaLib.Core.Common.CompressionHelper.DecompressedItemInfo.DecompressedBytes">
            <summary>
            The decompressed bytes.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.CompressionHelper.DecompressedItemInfo.DecompressedString">
            <summary>
            The decompressed bytes as a string.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.CompressionHelper.DecompressedItemInfo.FileName">
            <summary>
            The filename that was stored for the decompressed bytes.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.ConvertHelper">
            <summary>
            Helper routines for converting integral types.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToString(System.Byte[])">
            <summary>
            Use this to convert a SQL-timestamp field to a printable
            string (e.g. for debugging purposes).
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns>Returns the textual representation of the buffer
            or a NULL string if the buffer is NULL or a NULL
            if the buffer is empty.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToString(System.Object)">
            <summary>
            Convert to a string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToDouble(System.Object)">
            <summary>
            Convert a string to a double, returns 0.0 if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToInt32(System.Object)">
            <summary>
            Convert a string to an integer, returns 0 if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToDecimal(System.Object)">
            <summary>
            Convert a string to a decimal, returns zero if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToDateTime(System.Object)">
            <summary>
            Convert a string to a date time, returns DateTime.MinValue if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToBoolean(System.Object)">
            <summary>
            Convert a string to a boolean, returns FALSE if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToString(System.Object,System.String)">
            <summary>
            Convert to a string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            Convert a string to a double, returns 0.0 if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            Convert a string to an integer, returns 0 if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
            Convert a string to a decimal, returns zero if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            Convert a string to a date time, returns DateTime.MinValue if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>
            Convert a string to a boolean, returns FALSE if fails.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsBoolean(System.Object)">
            <summary>
            Checks whether a string contains a valid boolean.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns TRUE if is a boolean, FALSE if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsDateTime(System.Object)">
            <summary>
            Checks whether a string contains a valid date and/or time.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns true if is date/time, false if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsNumeric(System.Object)">
            <summary>
            Checks whether a string contains a valid float.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns TRUE if the string contains a float, FALSE if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsDecimal(System.Object)">
            <summary>
            Checks whether a string contains a valid decimal.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns TRUE if the string contains a decimal, FALSE if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsFloat(System.Object)">
            <summary>
            Checks whether a string contains a valid float.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns TRUE if the string contains a float, FALSE if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsDouble(System.Object)">
            <summary>
            Checks whether a string contains a valid double.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns TRUE if the string contains a double, FALSE if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsInteger(System.Object)">
            <summary>
            Checks whether a string contains a valid integer.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns TRUE if the string contains an integer, FALSE if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.IsCurrency(System.Object)">
            <summary>
            Checks whether a string contains a valid currency number.
            </summary>
            <param name="o">The string to check.</param>
            <returns>Returns TRUE if the string contains a currency, FALSE if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.DoIsNumeric(System.Object,System.Globalization.NumberStyles)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.FormatCurrency(System.Decimal)">
            <summary>
            Formats WITH currency symbol, default precision.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.FormatCurrency(System.Decimal,System.Int32)">
            <summary>
            Formats WITH currency symbol.
            </summary>
            <param name="val"></param>
            <param name="precision">Gives the number of decimals digits after the point.</param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.FormatCurrency(System.Decimal,System.Boolean)">
            <summary>
            WITH or WITHOUT currency symbol, default precision.
            </summary>
            <param name="val"></param>
            <param name="addCurrencySymbol"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.FormatCurrency(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            WITH or WITHOUT currency symbol, user-defined precision.
            </summary>
            <param name="val"></param>
            <param name="precision"></param>
            <param name="addCurrencySymbol"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ConvertHelper.FormatDecimal(System.Decimal)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:ZetaLib.Core.Common.IDumpable">
            <summary>
            Classes implementing this know how to dump themself.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.IDumpable.Dump(System.Int32,System.Boolean)">
            <summary>
            Dump for a current indent level and deep.
            </summary>
            <param name="indentLevel">How many tabs to indent.</param>
            <param name="deep">Whether to dump child objects.</param>
            <returns>Returns the textual representation of the dump.</returns>
            <remarks>
            Use the DumpBuilder class like this: 
            "DumpBuilder db = new DumpBuilder( indentLevel, deep, GetType() );".
            </remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.IDumpable.Dump">
            <summary>
            Dump for a indent level of zero and deep=true.
            </summary>
            <returns>Returns the textual representation of the dump.</returns>
            <remarks>
            Usually you just redirect this overload to "return Dump( 0, true );".
            </remarks>
        </member>
        <member name="T:ZetaLib.Core.Common.DumpBuilder">
            <summary>
            Class that helps in dumping.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.DumpBuilder.#ctor(System.Int32,System.Boolean,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="indentLevel"></param>
            <param name="deep"></param>
            <param name="typeToDump"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.DumpBuilder.AddLine(System.String,System.Object)">
            <summary>
            Add a line to dump.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.DumpBuilder.ToString">
            <summary>
            Get the dumped content.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.FileHelper">
            <summary>
            Miscellaneous helper functions for dealing with files.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.FileHelper.GetFileVersion(System.String)">
            <summary>
            Get the version information of a file.
            </summary>
            <param name="filePath">The path of the file to read the 
            information from.</param>
            <returns>Returns the version information or an empty Version
            object if no version information is present.</returns>
            <remarks>Code from 
            http://msdn.microsoft.com/library/en-us/csref/html/vcwlkunsafecodetutorial.asp.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.FileHelper.Win32Imports.VerQueryValue(System.Byte[],System.String,System.String@,System.UInt32@)">
            <summary>
            The third parameter - "out string pValue" - is automatically 
            marshaled from ANSI to Unicode.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.FileHelper.Win32Imports.VerQueryValue(System.Byte[],System.String,System.Int16*@,System.UInt32@)">
            <summary>
            This VerQueryValue overload is marked with 'unsafe' because 
            it uses a short*.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.HtmlHelper">
            <summary>
            Miscellaneous helper functions for HTML and related.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.HtmlHelper.VirtualPathCombine(System.String,System.String)">
            <summary>
            Like Path.Combine() but for virtual paths with forwardslash.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.HtmlHelper.FormatMultiLine(System.String)">
            <summary>
            Formats a multiline (ML) string. replaces '\n' with '&lt;br /&gt;'.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.HtmlHelper.EscapeJavaScript(System.String)">
            <summary>
            Escapes special characters used in JavaScript strings.
            </summary>
            <param name="textToEscape">The unescaped textToEscape to escape.</param>
            <returns>Returns the escaped textToEscape.</returns>
        </member>
        <member name="T:ZetaLib.Core.Common.ImageHelper">
            <summary>
            Miscellaneous routines for handling GDI+ images.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageHelper.LoadImage(System.String)">
            <summary>
            Provides a file-locking-safe alternative to Image.FromFile().
            See http://support.microsoft.com/kb/311754/EN-US/ for details.
            </summary>
            <param name="filePath">The file path to load from.</param>
            <returns>Returns the loaded image.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageHelper.SaveImage(System.Drawing.Image,System.String)">
            <summary>
            Generic saving function. Correctly handles file extension and
            the associated image format.
            </summary>
            <param name="image">The image to save.</param>
            <param name="filePath">The file path to save the image to.</param>
        </member>
        <member name="T:ZetaLib.Core.Common.ImageScaler">
            <summary>
            Class for scaling an image.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.NeedReduceSizeProportionallyX(System.Drawing.Image,System.Int32)">
            <summary>
            Check whether need to scale.
            Only the X dimension is specified. Y is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.NeedReduceSizeProportionallyY(System.Drawing.Image,System.Int32)">
            <summary>
            Check whether need to scale.
            Only the Y dimension is specified. X is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.NeedReduceSizeProportionally(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Check whether need to scale.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.NeedReducePixelSizeProportionally(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Check whether need to scale.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.NeedReducePixelSizeProportionallyX(System.Drawing.Image,System.Int32)">
            <summary>
            Check whether need to scale.
            Only the X dimension is specified. Y is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.NeedReducePixelSizeProportionallyY(System.Drawing.Image,System.Int32)">
            <summary>
            Check whether need to scale.
            Only the Y dimension is specified. X is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ReduceSizeProportionallyX(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            If the image is larger than the specified
            dimensions, it is proportionally scaled.
            If the image is smaller, nothing happens.
            Only the X dimension is specified. Y is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ReduceSizeProportionallyY(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            If the image is larger than the specified
            dimensions, it is proportionally scaled.
            If the image is smaller, nothing happens.
            Only the Y dimension is specified. X is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ReduceSizeProportionally(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            If the image is larger than the specified
            dimensions, it is proportionally scaled.
            If the image is smaller, nothing happens.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ReduceSizeProportionally(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            If the image is larger than the specified
            dimensions, it is proportionally scaled.
            If the image is smaller, nothing happens.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ReducePixelSizeProportionallyX(System.Drawing.Image,System.Int32)">
            <summary>
            If the image is larger than the specified
            dimensions, it is proportionally scaled.
            If the image is smaller, nothing happens.
            Only the X dimension is specified. Y is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ReducePixelSizeProportionallyY(System.Drawing.Image,System.Int32)">
            <summary>
            If the image is larger than the specified
            dimensions, it is proportionally scaled.
            If the image is smaller, nothing happens.
            Only the Y dimension is specified. X is ignored.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ReducePixelSizeProportionally(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            If the image is larger than the specified
            dimensions, it is proportionally scaled.
            If the image is smaller, nothing happens.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ScaleImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scale the given image to the given size.
            Uses a high interpolation mode quality.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ScaleImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Scale the given image to the given size.
            Uses the specifiied modes.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.PixelScaleImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Scale the given image to the given size.
            Uses a high interpolation mode quality.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.PixelScaleImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Scale the given image to the given size.
            Uses the specifiied modes.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ImageScaler.ScaleImageTn(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Use the internal thumbnail functionality.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.ILanguageStringLanguagesProvider">
            <summary>
            This plug-in interface is used by a LanguageString to actually
            query information about the languages supported.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ILanguageStringLanguagesProvider.GetLanguageInfoBySymbolicName(System.String)">
            <summary>
            Lookup a language string language info by its symbolic name.
            </summary>
            <param name="symbolicName">The symbolic name to look up. 
            The name is caseINsensitive.</param>
            <returns>Returns the found language info or NULL if none found.</returns>
        </member>
        <member name="P:ZetaLib.Core.Common.ILanguageStringLanguagesProvider.LanguageInfos">
            <summary>
            Returns the list of all supported languages.
            The first entry in the array is the fallback language.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LanguageStringLanguageInfo">
            <summary>
            One information item about a single language.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LanguageStringLanguageInfo.symbolicName">
            <summary>
            Either e.g. an integer or a string that
            uniquely represents the language.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LanguageStringLanguageInfo.dbColumnPostfix">
            <summary>
            The postfix to append to columns when reading
            from the database.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringLanguageInfo.op_Equality(ZetaLib.Core.Common.LanguageStringLanguageInfo,ZetaLib.Core.Common.LanguageStringLanguageInfo)">
            <summary>
            Overload for comparing the symbolic names.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringLanguageInfo.op_Inequality(ZetaLib.Core.Common.LanguageStringLanguageInfo,ZetaLib.Core.Common.LanguageStringLanguageInfo)">
            <summary>
            Overload for comparing the symbolic names.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringLanguageInfo.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringLanguageInfo.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringLanguageInfo.SymbolicName">
            <summary>
            Get or set the symbolic name.
            This is either e.g. an integer or a string that
            uniquely represents the language. Usually this is something like
            "en" for english or "de" for german.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringLanguageInfo.DBColumnPostfix">
            <summary>
            Get or set the database column postfix.
            This is the postfix to append to columns when reading
            from the database. E.g. nothing (empty string) for english, since
            this is often the default, or e.g. "_de" for german.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LanguageString">
            <summary>
            A string class that encapsulates a normal text string, together
            with additional information about the language that this string
            is associated with.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageString.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageString.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:ZetaLib.Core.Common.LanguageString.language">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LanguageString.text">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageString.LanguageInfo">
            <summary>
            Procides detailed information of the language that this 
            string represents.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageString.Text">
            <summary>
            The actual text value that is stored inside this string.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LanguageStringBaseCollection">
            <summary>
            A collection of language languageStrings, with each language string of the
            collection usually repesents a string different language.
            </summary>
            <remarks>
            This class usually is used when reading multi-lingual texts
            for an object in a database and constructing a C# class from this
            object. 
            In such a scenario, a LanguageStringBaseCollection-derived class
            would be one of multiple properties of this C# class representing
            the database object.
            </remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.#ctor(System.Boolean)">
            <summary>
            Creates all available languages by default, if param set to true.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.#ctor(ZetaLib.Core.Common.LanguageStringLanguageInfo[])">
            <summary>
            Initialize with these types.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.CreateDefaultLanguages">
            <summary>
            Creates language string items inside the collection
            with all different language infos and empty texts.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.GetString">
            <summary>
            Get a string in the current language.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.GetString(ZetaLib.Core.Common.LanguageStringLanguageInfo)">
            <summary>
            Get a string by specifying an explicit language.
            </summary>
            <param name="languageStringLanguageInfo">The language info
            to search for.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.GetString(System.String)">
            <summary>
            Get a string by specifying an explicit language.
            </summary>
            <param name="languageStringSymbolicName">The symbolic name of 
            the language to search for.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.SetString(ZetaLib.Core.Common.LanguageString)">
            <summary>
            Assigns a language string to this collection.
            If a language string with the same language info already exists, 
            it is overwritten, otherwise the language string is newly added.
            </summary>
            <param name="languageString">The language string to assign.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.SetString(ZetaLib.Core.Common.LanguageStringLanguageInfo,System.String)">
            <summary>
            Assign a string with a given language info.
            If a string for the language info already exists, it is
            overwritten, otherwise the string with the language info
            is newly added.
            </summary>
            <param name="languageInfo">The language info to store.</param>
            <param name="s">The string to store.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.Load(System.Data.DataRow,System.String)">
            <summary>
            Fill the current instance from a DataRow, overriding
            all current content in the current instance.
            </summary>
            <param name="row"></param>
            <param name="columnBaseName"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.Load(System.Data.DataRow,System.String,ZetaLib.Core.Common.LanguageStringBaseCollection.MissingLanguagColumnsBehavior)">
            <summary>
            Fill the current instance from a DataRow, overriding
            all current content in the current instance.
            </summary>
            <param name="row"></param>
            <param name="columnBaseName"></param>
            <param name="missingLanguagColumnsBehavior"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.Store(System.Data.DataRow,System.String)">
            <summary>
            Stores the current instance into a DataRow.
            </summary>
            <param name="row"></param>
            <param name="columnBaseName"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.Store(System.Data.DataRow,System.String,ZetaLib.Core.Common.LanguageStringBaseCollection.MissingLanguagColumnsBehavior)">
            <summary>
            Stores the current instance into a DataRow.
            </summary>
            <param name="row"></param>
            <param name="columnBaseName"></param>
            <param name="missingLanguagColumnsBehavior"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Returns a new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.LanguageStringBaseCollection.CopyFrom(System.Object)">
            <summary>
            Deep-copies the content of another object into
            the current instance.
            </summary>
            <param name="o">The object to copy from.</param>
            <remarks>My own function, not part of the ICloneable interface.</remarks>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringBaseCollection.LanguagesProvider">
            <summary>
            Assign the provider that is suitable for all instances of this
            class.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringBaseCollection.Strings">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringBaseCollection.Item(ZetaLib.Core.Common.LanguageStringLanguageInfo)">
            <summary>
            Access the languages by array.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringBaseCollection.CurrentAutomaticLanguage">
            <summary>
            Use this class to provide context-dependent retrieval
            of the current set default language.
            This could e.g. be the current browser language or
            a language that the user selected manually.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringBaseCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringBaseCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LanguageStringBaseCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LanguageStringBaseCollection.MissingLanguagColumnsBehavior">
            <summary>
            Configures the behavior if a missing column in a data row
            is detected.
            "Missing" means that a language string with a certain 
            language info exists in the current language string collection,
            but the column for that language is missing in the database row.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LanguageStringBaseCollection.MissingLanguagColumnsBehavior.Ignore">
            <summary>
            Ignore a missing column and simply don't read/write.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LanguageStringBaseCollection.MissingLanguagColumnsBehavior.Fail">
            <summary>
            Fail the whole read/write operation when a column in a 
            certain language is missing.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LoggingInformation">
            <summary>
            Independently usable class that returns various strings with
            environment-related logging information.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this class.
            </remarks>
        </member>
        <member name="P:ZetaLib.Core.Common.LoggingInformation.All">
            <summary>
            Return a string with a collection of all the discrete information 
            that this class provides.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LoggingInformation.WindowsEnvironment">
            <summary>
            Provide Windows-environment information.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LoggingInformation.NetworkEnvironment">
            <summary>
            Provide network-environment information.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LoggingInformation.Assemblies">
            <summary>
            Provide information about the current assemblies.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LoggingInformation.ObjectPair">
            <summary>
            A simple pair, used for name-value pairs.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LoggingInformation.ObjectPair.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LoggingInformation.ObjectPair.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LoggingInformation.ObjectPair.#ctor(System.Object,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LoggingInformation.ObjectPair.Name">
            <summary>
            Access the name.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LoggingInformation.ObjectPair.Value">
            <summary>
            Access the value.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LogCentral">
            <summary>
            Central base for logging, so that even library functions
            have access to logging functionality.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this class.
            </remarks>
        </member>
        <member name="T:ZetaLib.Core.Common.Logger">
            <summary>
            A logger is a unit that is able to log.
            You do NOT create any instances of this class by yourself.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this class.
            </remarks>
        </member>
        <member name="F:ZetaLib.Core.Common.Logger.requestMoreInformationEvents">
            <summary>
            Collect the events.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogDebug(System.Object)">
            <summary>
            Log a debug message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogDebug(System.Object,System.Exception)">
            <summary>
            Log a debug message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogFatal(System.Object)">
            <summary>
            Log a fatal message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogFatal(System.Object,System.Exception)">
            <summary>
            Log a fatal message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogError(System.Object)">
            <summary>
            Log an error message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogError(System.Object,System.Exception)">
            <summary>
            Log an error message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogInfo(System.Object)">
            <summary>
            Log an info message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogInfo(System.Object,System.Exception)">
            <summary>
            Log an info message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogWarn(System.Object)">
            <summary>
            Log a warning message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.LogWarn(System.Object,System.Exception)">
            <summary>
            Log a warning message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="loggerName">The name of the logger. Pass NULL
            or empty string for the root logger.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.GetLoggerByName(System.String)">
            <summary>
            Get a certain logger by a specified name.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.Logger.loggers">
            <summary>
            Stores all loggers.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.Logger.logImplementation">
            <summary>
            The actual connection to LOG4NET.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.Logger.isInsideLogging">
            <summary>
            By using this flag, we avoid stack overflow inside the called
            event handlers during logging.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.Logger.loggerName">
            <summary>
            The name of the logger.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.CombineMoreInformationMessage(System.Object,System.String)">
            <summary>
            Combines the more information strings and the regular
            message string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.DispatchRequestMoreInformationEvents(ZetaLib.Core.Common.LogCentralLogEventArgs.LogType,System.String,System.Object)">
            <summary>
            Dispatches the RequestMoreInformation event to
            all connected event handlers (if any).
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.DispatchRequestMoreInformationEvents(ZetaLib.Core.Common.LogCentralLogEventArgs.LogType,System.String,System.Object,System.Exception)">
            <summary>
            Dispatches the RequestMoreInformation event to
            all connected event handlers (if any).
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.MakeUserReadableExceptionMessage(System.Exception)">
            <summary>
            Unwind all inner exceptions and add up their Message properties.
            </summary>
            <param name="t">The exception.</param>
            <returns>Returns the complete string.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.MakeUserReadableExceptionMessage(System.Exception,System.String)">
            <summary>
            Unwind all inner exceptions and add up their Message properties.
            </summary>
            <param name="t">The exception.</param>
            <param name="innerExceptionMessageSeparator">The string to concatenate
            two inner exceptions with.</param>
            <returns>Returns the complete string.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.MakeTraceMessage(System.Exception)">
            <summary>
            Make a string to trace from a given message and exception.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.MakeTraceMessage(System.Object,System.Exception)">
            <summary>
            Make a string to trace from a given message and exception.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.MakeTraceMessage(System.Object)">
            <summary>
            Make a string to trace from a given message.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.ProtectPasswords(System.Object)">
            <summary>
            Never allow passwords to be displayed, no matter where.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.Indent(System.String)">
            <summary>
            Indents block of lines.
            </summary>
            <param name="textToIndent">The textToIndent to indent.</param>
            <returns>Returns the indented textToIndent.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.Indent(System.String,System.String)">
            <summary>
            Indents block of lines.
            </summary>
            <param name="textToIndent">The textToIndent to indent.</param>
            <param name="linePrefix">The prefix to add before every found line.</param>
            <returns>Returns the indented textToIndent.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.Logger.MakeInnerExceptionsTrace(System.Exception)">
            <summary>
            Add up the inner exception texts.
            </summary>
        </member>
        <member name="E:ZetaLib.Core.Common.Logger.RequestMoreInformation">
            <summary>
            The event that tries to request more information. This event
            is raised before a message is actually being logged. Use this
            event to add your own handler to provide more detailed information
            to the message being logged.
            </summary>
        </member>
        <member name="E:ZetaLib.Core.Common.Logger.Log">
            <summary>
            Logging event. This event is raised after
            a call to one of the LogDebug, LogError, etc. functions occured.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.Logger.LoggerName">
            <summary>
            The name of the logger.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentral.current">
            <summary>
            Can be static here, even for a web application, because
            no session-/user-dependent information is stored inside
            this class.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ConfigureLogging(System.IO.Stream)">
            <summary>
            Configures logging through the given stream with 
            XML configuration data.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ConfigureLogging(System.String)">
            <summary>
            Configures logging through the given file with 
            XML configuration data.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ConfigureLogging(System.Xml.XmlElement)">
            <summary>
            Configures logging through the given file with 
            XML configuration data.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ConfigureLogging">
            <summary>
            Automatically configures logging. Searches for possible
            configuration files.
            This function is called automatically, too.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ExpandFilePathMacros(System.String)">
            <summary>
            Helper function for centralized expanding of "${xxx}"-placeholders.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ExpandMacroInString(System.String)">
            <summary>
            Expand "${xxx}"-placeholders.
            Returns original string with expanded macros (if any).
            If a macro could not be expanded, it is replaced by an empty string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ExpandMacro(System.String)">
            <summary>
            Expand "${xxx}"-placeholders.
            Returns empty string if not found.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.CheckExpandMacro(System.Boolean@,System.String@,System.String,System.String)">
            <summary>
            Helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ConvertConfigToXml(System.IO.Stream)">
            <summary>
            Loads configuration and expands any macros.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ConvertConfigToXml(System.IO.FileInfo)">
            <summary>
            Loads configuration and expands any macros.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.ConvertConfigToXml(System.Xml.XmlElement)">
            <summary>
            Loads configuration and expands any macros.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.GetRootLogger">
            <summary>
            Get the root logger.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.FindConfigInPath(System.String)">
            <summary>
            Searches for a configuration file in the given path.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentral.configurationFilePath">
            <summary>
            The path where the configuration is read from.
            This value is set upon a call to ConfigureLogging().
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.CombineMoreInformationMessage(System.Object,System.String)">
            <summary>
            Combines the more information strings and the regular
            message string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.LogCentral_RequestMoreInformationAssembly(System.Object,ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs)">
            <summary>
            Provide my own handler for basic information.
            </summary>
            <remarks>
            This handler is called when the logging framework wants more
            information about the current environment.
            </remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.LogCentral_RequestMoreInformationEnvironment(System.Object,ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs)">
            <summary>
            Provide my own handler for basic information.
            </summary>
            <remarks>
            This handler is called when the logging framework wants more
            information about the current environment.
            </remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentral.LogCentral_RequestMoreInformationNetworkEnvironment(System.Object,ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs)">
            <summary>
            Provide my own handler for basic information.
            </summary>
            <remarks>
            This handler is called when the logging framework wants more
            information about the current environment.
            </remarks>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentral.Current">
            <summary>
            Access the current instance of the class.
            </summary>
        </member>
        <member name="E:ZetaLib.Core.Common.LogCentral.FindConfigurationFilePath">
            <summary>
            Helper for searching.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentral.Item(System.String)">
            <summary>
            Get a certain logger by a specified name.
            Returns the root logger if the specified logger was not found.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentral.ConfigurationFilePath">
            <summary>
            Get the full path to the configuration file of this
            application. Usually a file with ".CONFIG" extension.
            Can be NULL when configured through a stream or through
            an XML element.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LogCentralLogEventArgs">
            <summary>
            Arguments to the log central event.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this class.
            </remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralLogEventArgs.#ctor(System.String,ZetaLib.Core.Common.LogCentralLogEventArgs.LogType,System.String,System.Object,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralLogEventArgs.#ctor(System.String,ZetaLib.Core.Common.LogCentralLogEventArgs.LogType,System.String,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralLogEventArgs.#ctor(System.String,ZetaLib.Core.Common.LogCentralLogEventArgs.LogType)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralLogEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralLogEventArgs.loggerName">
            <summary>
            Make them private for read-only.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentralLogEventArgs.LoggerName">
            <summary>
            The name of the logger.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentralLogEventArgs.Type">
            <summary>
            The type of log event.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentralLogEventArgs.OriginalMessage">
            <summary>
            The original message that is logged. You cannot modify the
            message in your event handler, because the logging
            already has occured.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentralLogEventArgs.Message">
            <summary>
            The message that is logged. You cannot modify the
            message in your event handler, because the logging
            already has occured.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentralLogEventArgs.Error">
            <summary>
            The exception that occured.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LogCentralLogEventArgs.LogType">
            <summary>
            The type of the texts to log.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralLogEventArgs.LogType.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralLogEventArgs.LogType.Info">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralLogEventArgs.LogType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralLogEventArgs.LogType.Debug">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralLogEventArgs.LogType.Warn">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralLogEventArgs.LogType.Fatal">
            <summary>
            Fatal.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LogCentralLogEventHandler">
            <summary>
            Delegate that is called upon logging from LogXxx().
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this delegate.
            </remarks>
        </member>
        <member name="T:ZetaLib.Core.Common.LogCentralFindConfigurationFilePathEventHandler">
            <summary>
            Delegate that is called upon searching for the configuration file
            path while logging.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this delegate.
            </remarks>
        </member>
        <member name="T:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs">
            <summary>
            Arguments to the event that tries to query additional information
            about the environment or the current session info.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this class.
            </remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs.#ctor(System.String,ZetaLib.Core.Common.LogCentralLogEventArgs.LogType,System.String,System.Object,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs.#ctor(System.String,ZetaLib.Core.Common.LogCentralLogEventArgs.LogType,System.String,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs.#ctor(System.String,ZetaLib.Core.Common.LogCentralLogEventArgs.LogType)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs.moreInformationMessage">
            <summary>
            The event handler that gets this object passed can
            place additional information here.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventArgs.MoreInformationMessage">
            <summary>
            The event handler that gets this object passed can
            place additional information here.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.LogCentralRequestMoreInformationEventHandler">
            <summary>
            Delegate that is called when the logging framework tries to query 
            additional information about the environment or the current session 
            info. Useful e.g. for passing infos about the currently logged in
            user or other things.
            </summary>
            <remarks>	
            Please contact the author Uwe Keim (mailto:uwe.keim@zeta-software.de)
            for questions regarding this delegate.
            </remarks>
        </member>
        <member name="T:ZetaLib.Core.Common.Pair">
            <summary>
            A simple pair, used for e.g. name-value pairs inside
            combobox values.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Pair.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.Pair.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.Pair.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="P:ZetaLib.Core.Common.Pair.One">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.Pair.Two">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.Pair.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.Pair.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.StringPair">
            <summary>
            A simple pair of strings, used for e.g. name-value pairs inside
            combobox values.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringPair.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringPair.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.StringPair.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.StringPair.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZetaLib.Core.Common.StringPair.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringPair.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringPair.One">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringPair.Two">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.StringTripple">
            <summary>
            A simple pair of strings, used for e.g. name-value pairs inside
            combobox values.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringTripple.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringTripple.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.StringTripple.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.StringTripple.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="val"></param>
            <param name="val2"></param>
        </member>
        <member name="M:ZetaLib.Core.Common.StringTripple.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZetaLib.Core.Common.StringTripple.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringTripple.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringTripple.Value2">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringTripple.One">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringTripple.Two">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.StringTripple.Three">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.PathHelper">
            <summary>
            Miscellaneous helper functions for manipulating filenames and
            folder names.
            </summary>
            <remarks>Parts copied from "HttpUtility.cs" from MONO.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.UrlEncode(System.String)">
            <summary>
            URL-encode a text with the XAlphas encoding.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.UrlEncode(System.String,ZetaLib.Core.Common.PathHelper.UrlEncoding)">
            <summary>
            URL-encode a text with the given encoding.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.UrlEncode(System.String,ZetaLib.Core.Common.PathHelper.UrlEncoding,System.Text.Encoding)">
            <summary>
            URL-encode a text with the given encoding.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.UrlDecode(System.String)">
            <summary>
            URL-decode a text.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            URL-decode a text.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.HtmlEncode(System.String)">
            <summary>
            HTML-encode a text.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.HtmlDecode(System.String)">
            <summary>
            HTML-decode a text.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.GetParentPath(System.String)">
            <summary>
            Get the parent path, if possible.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.ConvertBackslashsToForwardslashs(System.String)">
            <summary>
            Convert all forward slashs to backslashs.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.ConvertForwardslashsToBackslashs(System.String)">
            <summary>
            Convert all backslashs to forwardslashs.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.IsAbsolutePath(System.String)">
            <summary>
            Check whether a given path contains an absolute or relative path.
            No disk-access is performed, only the syntax of the given string
            is checked.
            </summary>
            <param name="path">The path to check.</param>
            <returns>Returns TRUE if the given path is an absolute path,
            returns FALSE if the given path is a relative path.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.PathHelper.GetAbsolutePath(System.String,System.String)">
            <summary>
            Makes 'path' an absolute path, based on 'basePath'.
            If the given path is already an absolute path, the path
            is returned unmodified.
            </summary>
            <param name="path">The path to make absolute.</param>
            <param name="basePath">The base path to use when making an
            absolute path.</param>
            <returns>Returns the absolute path.</returns>
        </member>
        <member name="T:ZetaLib.Core.Common.PathHelper.UrlEncoding">
            <summary>
            What to encode.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.PathHelper.UrlEncoding.XAlphas">
            <summary>
            Escape all unsafe characters.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.PathHelper.UrlEncoding.XPAlphas">
            <summary>
            As XAlphas but allows '+'.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.PathHelper.UrlEncoding.Path">
            <summary>
            As XPAlphas but allows '/'.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.PathHelper.UrlEncoding.DosFile">
            <summary>
            As Path but allows ':'.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.StringHelper">
            <summary>
            Miscellaneous helper functions for strings.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.SerializeToString(System.Object)">
            <summary>
            Serializes an object to a string.
            </summary>
            <param name="o">The object to serialize.</param>
            <returns>Returns the base64-encoded string 
            that represents the serialized object.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.DeserializeFromString(System.String)">
            <summary>
            Deserializes an object from a string.
            </summary>
            <param name="s">The base64-encoded string 
            that represents the serialized object.</param>
            <returns>Returns the deserialized object.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.FormatFileSize(System.Int32)">
            <summary>
            Converts a numeric value into a string that represents the number 
            expressed as a size value in bytes, kilobytes, megabytes, or 
            gigabytes, depending on the size.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.EscapeRxCharacters(System.String)">
            <summary>
            Escape special RX characters.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.GenerateMatchCode(System.String,System.String)">
            <summary>
            Generates a matchCode, based on 'name', if 'matchCode' is
            currently NOT a valid matchCode.
            otherwise just returns 'matchCode'.
            </summary>
            <param name="matchCode">Matchcode to check.</param>
            <param name="name">Base for possible matchCode to generate.</param>
            <returns>Returns the ready-to-use matchCode.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.GenerateHash(System.String)">
            <summary>
            Generate a MD5 hash from a given string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.GenerateMatchCode(System.String)">
            <summary>
            
            </summary>
            <param name="matchCode"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.SplitEx(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.SplitEx(System.String,System.Char[])">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.IsValidMatchCode(System.String)">
            <summary>
            Check whether a given matchCode is valid.
            </summary>
            <param name="matchCode">The matchCode to check.</param>
            <returns>Returns TRUE if valid, FALSE otherwise.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.AddZerosPrefix(System.Object,System.Int32)">
            <summary>
            Appends zeros ('0') at the head of the passed string,
            until a certain number of total characters is reached.
            </summary>
            <param name="text">The string to append the zeros.</param>
            <param name="length">The required number of characters.</param>
            <returns>Returns the string with the appended number of characters.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.IsValidEMailAddress(System.String)">
            <summary>
            Does some (weak) validations whether the given string
            is a valid e-mail address.
            </summary>
            <param name="s">The string to check.</param>
            <returns>Returns true if the e-mail address seems to be valid, false if not.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.RXReplace(System.String,System.String,System.String,System.String)">
            <summary>
            Performs a regular expression replace like ( )~ s/ / / in Perl.
            </summary>
            <param name="text"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <param name="flags">"i":ignore case and "g":global, "m":multiline.</param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.ConvertRxOptionsFromString(System.String)">
            <summary>
            Converts between Perl-style RX flags and .NET RX options.
            </summary>
            <param name="flags">The Perl-style RX flags.</param>
            <returns>Returns the .NET RX options.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.StringHelper.RXTest(System.String,System.String,System.String)">
            <summary>
            Performs a regular expression test like ( )~ m/ / in Perl.
            </summary>
            <param name="text"></param>
            <param name="pattern"></param>
            <param name="flags">"i":ignore case and "m":multiline.</param>
        </member>
        <member name="T:ZetaLib.Core.Common.TextFormatter">
            <summary>
            Class for formatting and replacing text in columns.
            The placeholders have the format "{Xxx}" or "{Xxx:nn}" or "{Xxx:nn,align}", 
            with ":nn" being an optional integer value defining the column 
            width. If too small, the remaining columns are filled with blanks, 
            if too wide, the text is word-wrapped.
            ",align" is an optional alignment which can be "l" or "r". "l" aligns
            left (the default if omitted), "r" aligns right.
            </summary>
            <remarks>Be sure to let the formatter expand the variables from
            LEFT to RIGHT, otherwise you would get some gaps upon word wrapping.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="searchIn">The text to search in.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.ReplaceText(System.String,System.String)">
            <summary>
            Replacing placeholders with and without column number 
            information.
            </summary>
            <param name="searchFor">The text to search for.</param>
            <param name="replaceWith">The text to insert.</param>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.MakeLines(System.String)">
            <summary>
            Splits the text into lines.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.MakeStringFromLines">
            <summary>
            Convert the current lines to a single, multiline string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.FindPlaceholder(System.String,System.Boolean@,ZetaLib.Core.Common.TextFormatter.Alignment@,System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Searches for a placeholder and returns information
            about that placeholder.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.CheckInsertDynamicLines(System.Int32,System.Int32)">
            <summary>
            Ensures that the specified number of blank lines
            are present below the given line.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.EscapeRxCharacters(System.String)">
            <summary>
            Escape special RX characters.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.Dump">
            <summary>
            For debugging purposes, outputs the current content.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.TextFormatter.lines">
            <summary>
            A collection of Line objects.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.TextFormatter.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.TextFormatter.Text">
            <summary>
            Returns the string with the replaced texts.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.TextFormatter.Alignment">
            <summary>
            How text should be aligned.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.TextFormatter.Alignment.Left">
            <summary>
            Align left, the default.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.TextFormatter.Alignment.Right">
            <summary>
            Align text right.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.TextFormatter.Line">
            <summary>
            A single line of text.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.TextFormatter.Line.Content">
            <summary>
            The content of the line.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.TextFormatter.Line.Type">
            <summary>
            what type is this line.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.TextFormatter.Line.LineType">
            <summary>
            what type is this line.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.TextFormatter.Line.LineType.OriginalLine">
            <summary>
            A line, presented in the original text.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.TextFormatter.Line.LineType.NewlyInsertedLine">
            <summary>
            A dynamically inserted line.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.WordWrapper">
            <summary>
            Class for breaking a text into multiple lines at a specific column
            width. Behaves like Notepad in word-wrap mode.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.Wrap">
            <summary>
            Does the actual wrapping.
            </summary>
            <returns>Returns the wrapped string.</returns>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.GetWordStartLeftFromPos(System.Int32)">
            <summary>
            Searches for the word start in the current line,
            left to the given position.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.GetWordEndRightFromPos(System.Int32)">
            <summary>
            Searches for the word end,
            right to the given position.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.IsAtLineStartPos(System.Int32)">
            <summary>
            Check whether a line STARTS at the given position.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.IsWordStartAtPos(System.Int32)">
            <summary>
            Check whether a word STARTS at the given position.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.IsWordEndAtPos(System.Int32)">
            <summary>
            Check whether a word ENDS at the given position.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.WordWrapper.CurrentColumnPos">
            <summary>
            The position of the current colum in the source text.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.WordWrapper.CurrentPos">
            <summary>
            The absolute position within the string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.WordWrapper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.XmlHelper">
            <summary>
            Helper routines for reading and manipulating XML documents.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.CreateDocument">
            <summary>
            Creates a new document with the appropriate processing
            instructions.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.String@,System.Xml.XmlAttribute)">
            <summary>
            Read a string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.String@,System.Xml.XmlAttribute,System.String)">
            <summary>
            Read a string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.Int32@,System.Xml.XmlAttribute)">
            <summary>
            Read an integer.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.Int32@,System.Xml.XmlAttribute,System.Int32)">
            <summary>
            Read an integer.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.DateTime@,System.Xml.XmlAttribute)">
            <summary>
            Read an DateTime.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.DateTime@,System.Xml.XmlAttribute,System.DateTime)">
            <summary>
            Read an DateTime.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.Boolean@,System.Xml.XmlAttribute)">
            <summary>
            Read a boolean.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.Boolean@,System.Xml.XmlAttribute,System.Boolean)">
            <summary>
            Read a boolean.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.Decimal@,System.Xml.XmlAttribute)">
            <summary>
            Read a decimal.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadAttribute(System.Decimal@,System.Xml.XmlAttribute,System.Decimal)">
            <summary>
            Read a decimal.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.String@,System.Xml.XmlNode)">
            <summary>
            Read a string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.String@,System.Xml.XmlNode,System.String)">
            <summary>
            Read a string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.Int32@,System.Xml.XmlNode)">
            <summary>
            Read an integer.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.Int32@,System.Xml.XmlNode,System.Int32)">
            <summary>
            Read an integer.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.Boolean@,System.Xml.XmlNode)">
            <summary>
            Read a boolean.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.Boolean@,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Read a boolean.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.Decimal@,System.Xml.XmlNode)">
            <summary>
            Read a decimal.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.ReadNode(System.Decimal@,System.Xml.XmlNode,System.Decimal)">
            <summary>
            Read a decimal.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.XmlHelper.#ctor">
            <summary>
            Never instantiate this class.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.ZetaApplicationException">
            <summary>
            Enhanced base class for application exceptions.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor(ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor(System.String,ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Common.ZetaApplicationException.#ctor(System.String,System.Exception,ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.ZetaApplicationException.InternalLoggingBehaviour">
            <summary>
            The ways to behave when the exception is caught and the code
            must decide whether to log this exception or not.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviour">
            <summary>
            The ways to behave when the exception is caught and the code
            must decide whether to log this exception or not.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint">
            <summary>
            The ways to behave when the exception is caught and the code
            must decide whether to log this exception or not.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint.Default">
            <summary>
            Do the default behavior. This depends on the
            code that actually catches the exception.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint.Log">
            <summary>
            The catching code should log the exception.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Common.ZetaApplicationException.LoggingBehaviourHint.DontLog">
            <summary>
            The catching code should not log the exception.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.NullBehaviour">
            <summary>
            How the CreateParameter()-functions behave when passing null-values.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.NullBehaviour.ConvertNullToDBNull">
            <summary>
            Convert NULL values to DBNull.Value.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.NullBehaviour.NoConversion">
            <summary>
            Just pass on the parameters with no auto-conversion.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.NullBehaviour.ConvertNullToEmptyString">
            <summary>
            Convert a null value to string.Empty.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.NullBehaviour.ConvertEmptyStringToDBNull">
            <summary>
            Convert a string.Empty to DBNull.Value.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.CacheUsage">
            <summary>
            Use this enum to control the cache usage. I.e. when/whether to use
            the cache or to not use the cache.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.CacheUsage.UseDefault">
            <summary>
            Use the default behaviour. I.e. use the cache if it is activated,
            don't use if it is deactivated. Also don't use if the cache is
            activated paritally.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.CacheUsage.NoCache">
            <summary>
            Don't use the cache, no matter whether it is globally activated.
            Also implies 'DontClear'.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.CacheUsage.DontClear">
            <summary>
            Hint for an update function that it should NOT clear the cache.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.CacheUsage.UseCache">
            <summary>
            Do use the cache, no matter whether it is globally deactivated.
            Also does use if the cache is partially activated.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.CacheItemScope">
            <summary>
            Use this enum to control the scope of how an item is stored in
            the cache and how it is visible in a shared (e.g. web-) environment.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.CacheItemScope.Auto">
            <summary>
            Use the automatic setting. This is suitable for most scenarios.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.CacheItemScope.PerHttpRequest">
            <summary>
            Cache once per HTTP request. Keeps the data private to the 
            requesting page, does NOT share with other request. 
            If not running in a web-environment, this value has the same
            effect as "Auto".
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.CacheControl">
            <summary>
            This class can be passed to various functions for controlling about
            how to deal with the cache.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.#ctor(ZetaLib.Core.Data.CacheUsage)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.#ctor(ZetaLib.Core.Data.CacheUsage,ZetaLib.Core.Data.CacheItemScope)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.#ctor(ZetaLib.Core.Data.CacheItemScope)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.#ctor(ZetaLib.Core.Data.CacheUsage,ZetaLib.Core.Data.CacheItemScope,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.#ctor(ZetaLib.Core.Data.CacheItemScope,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.#ctor(ZetaLib.Core.Data.CacheUsage,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.CacheControl.op_Implicit(ZetaLib.Core.Data.CacheUsage)~ZetaLib.Core.Data.CacheControl">
            <summary>
            Construct a CacheControl object implicitely by a CacheUsage.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.CacheControl.Usage">
            <summary>
            Tell the caching routines when/whether to use the cache or to 
            not use the cache.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.CacheControl.ItemScope">
            <summary>
            Controls the scopy where an is stored in the cache and 
            how it is visible in a shared (e.g. web-) environment.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.CacheControl.CacheKeyPrefix">
            <summary>
            If this value is non-NULL, this value is used to generate
            the key to store in the cache, or to delete from the cache.
            If this value is NULL, the key is generated from the SQL query only.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetBaseCache">
            <summary>
            Base class for cache classes.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.ClearCache">
            <summary>
            If you are UPDATING the database, you should call the ClearCache function
            to be sure that all values read are correct.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.ClearCache(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Clear more selectively.
            </summary>
            <param name="cacheControl">Uses the 'cacheKeyPrefix' member, if given, to
            delete only the specified keys. If the 'cacheKeyPrefix' member is null, all
            ADO.NET entries are cleared.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.GetDatasetFromCache(System.String,System.String,System.Collections.ICollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Try to read a DataSet from the web(!)-cache.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns NULL if not found or cache is deactivated.</returns>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.GetDatasetFromCache(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Try to read a DataSet from the web(!)-cache.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns NULL if not found or cache is deactivated.</returns>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.PutDatasetToCache(System.Data.DataSet,System.String,System.String,System.Collections.ICollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Try to put a DataSet into the web(!)-cache.
            Does nothing if the cache is deactivated.
            </summary>
            <param name="ds"></param>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.PutDatasetToCache(System.Data.DataSet,System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Try to put a DataSet into the web(!)-cache.
            Does nothing if the cache is deactivated.
            </summary>
            <param name="ds"></param>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.CheckClearCache(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Checks whether the cache should be cleared.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.CheckGetFromCache(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Checks whether something should be get from the cache.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.CheckPutToCache(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Checks whether something should be get from the cache.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseCache.ComputeKey(ZetaLib.Core.Data.CacheControl,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Makes a unique key from the given spParameters.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseCache.cacheBehaviour">
            <summary>
            Only cache if enabled.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseCache.cacheKeyPrefix">
            <summary>
            The prefix for the keys in the cache.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetBaseCache.CacheBehaviour">
            <summary>
            Only cache if enabled.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetBaseHelper">
            <summary>
            Base class for helper classes.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.DetectDatabaseTypeFromConnectionString(System.String)">
            <summary>
            Tries to detect a database type from the connection string.
            </summary>
            <param name="connectionString">The connection string used to detect
            the database type.</param>
            <returns>Returns the database type or throws exception if not
            detectable.</returns>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.connectionString">
            <summary>
            Stores the current connection string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.InitializeConnectionString">
            <summary>
            First-sets the connection string.
            </summary>
            <returns>Returns the connection string if found,
            or NULL if not found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.ReplaceConnectionStringTilde(System.String)">
            <summary>
            The connection string allows a tile ("~") as the first character
            in path specifications (e.g. inside a connection string for
            Microsoft Access MDB databases).
            </summary>
            <remarks>
            This function tries to replace the tilde with path where the 
            configuration file ("app.config" or "web.config") is located.
            </remarks>
            <param name="connectionString">The connection string that
            (optionally) contains a tilde inside the path.</param>
            <returns>Returns the connection string with an expanded tilde,
            or the original connection string if no tilde was found at a
            suitable position.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.IsModifyingQuery(System.String)">
            <summary>
            Checks whether the query is a modifying query.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.DetectCommandType(System.String)">
            <summary>
            Tries to detect whether the given command text is
            a stored procedure call or a normal text.
            </summary>
            <param name="commandText">The command text to check.</param>
            <returns>Returns the command type.</returns>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.WantSetCommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.CommandTimeoutSeconds">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSql(System.String,System.Boolean,System.Data.DataSet)">
            <summary>
            If turned on, logs a SQL statement.
            </summary>
            <param name="sql">The SQL statement to log.</param>
            <param name="before">Tell, whether before or after the execution of the
            SQL statement.</param>
            <param name="associatedDataSet"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSql(System.String,System.String,System.Boolean,System.Data.DataSet)">
            <summary>
            If turned on, logs a SQL statement.
            </summary>
            <param name="additionalText">Additional text that is traced.</param>
            <param name="sql">The SQL statement to log.</param>
            <param name="before">Tell, whether before or after the execution of the
            SQL statement.</param>
            <param name="associatedDataSet"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSql(System.Data.IDbCommand,System.Boolean,System.Data.DataSet)">
            <summary>
            If turned on, logs a SQL command (i.e. a stored procedure call).
            </summary>
            <param name="cmd">The SQL statement to log.</param>
            <param name="before">Tell, whether before or after the execution of the
            SQL statement.</param>
            <param name="associatedDataSet"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSql(System.String,System.Data.IDbCommand,System.Boolean,System.Data.DataSet)">
            <summary>
            If turned on, logs a SQL command (i.e. a stored procedure call).
            </summary>
            <param name="additionalText">Additional text that is traced.</param>
            <param name="cmd">The SQL statement to log.</param>
            <param name="before">Tell, whether before or after the execution of the
            SQL statement.</param>
            <param name="associatedDataSet"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSqlError(System.String,System.Exception)">
            <summary>
            Traces about an SQL error.
            </summary>
            <param name="sql"></param>
            <param name="x"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSqlError(System.String,System.String,System.Exception)">
            <summary>
            Traces about an SQL error.
            </summary>
            <param name="additionalText"></param>
            <param name="sql"></param>
            <param name="x"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSqlError(System.Data.IDbCommand,System.Exception)">
            <summary>
            Traces about an SQL error.
            </summary>
            <param name="cmd"></param>
            <param name="x"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.TraceSqlError(System.String,System.Data.IDbCommand,System.Exception)">
            <summary>
            Traces about an SQL error.
            </summary>
            <param name="additionalText"></param>
            <param name="cmd"></param>
            <param name="x"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.DumpDataRow(System.Data.DataRow)">
            <summary>
            Puts the current content of a row to a string.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseHelper.CreatePseudoSqlFromSP(System.String,System.Collections.ICollection)">
            <summary>
            Creates a string from the given stored procedure name
            and its spParameters. Useful when creating a caching key.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="spParameters">A collection of SqlParameter objects.</param>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.WantTrace">
            <summary>
            Only trace if enabled.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetBaseHelper.ConnectionString">
            <summary>
            The default connection string for the ExecuteXxx() routines.
            If you use an overload with no connection string, this value
            here is used.
            </summary>
            <remarks>The "connectionString" appSettings value of the application
            configuration file is read automatically.</remarks>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetBaseHelper.DatabaseType">
            <summary>
            The type of the database.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.DatabaseType.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.DatabaseType.SqlServer">
            <summary>
            Microsoft SQL server.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.DatabaseType.Access">
            <summary>
            Microsoft Access.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetBaseHelper.DatabaseType.Oracle">
            <summary>
            Oracle.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetBaseParamCollection">
            <summary>
            Base class for parameter collection classes.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetBaseParamCollection.ApplyNullBehaviourToValue(System.Object,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Returns a modified version of the given value depending on
            the NullBehaviour.
            </summary>
            <param name="value"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetBaseUpdater">
            <summary>
            Base class for updater classes.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOdbcCache">
            <summary>
            The main cache class.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOdbcHelper">
            <summary>
            Helper class with statics, dealing with databases.
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.
            - "cacheSqlEnabled": Turn caching of SQL statements and their result inside
            the ASP.NET web cache on/off.
            - "commandTimeoutSeconds": Define an optional timeout for a command to execute.
            Please note that this parameter is different from the connection timeout which
            can be defined inside the connection string.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String,System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <param name="CacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String,System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
            <param name="CacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="CacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="CacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteForUpdate(System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteForUpdate(System.String,System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteForUpdate(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.ExecuteForUpdate(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.GetTableSchema(System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tablename">The name of the table.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.GetTableSchema(System.String,System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tablename">The name of the table.</param>
            <param name="connectionString">The connection string used to connect.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.CheckSetCommandTimeout(System.Data.Odbc.OdbcCommand)">
            <summary>
            If the configuration file specifies a command timeout,
            set it now.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.GetIdentity(System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="tablename">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.GetIdentity(System.String,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="connectionString">The connection string being used to 
            query for the identity value.</param>
            <param name="tablename">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcHelper.GetIdentity(System.Data.Odbc.OdbcConnection,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tablename">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOdbcParamCollection">
            <summary>
            Because OdbcParameterCollection cannot be instantiated,
            this class mimics the required operations of OdbcParameterCollection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.#ctor(System.Data.Odbc.OdbcParameter[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Add(System.Data.Odbc.OdbcParameter)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcParamCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcParamCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcParamCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcParamCollection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcParamCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOdbcUpdater">
            <summary>
            Class that simplifies the adding/updating of recordsets with ADO.NET.
            See also: http://nisos/zkb/pages/ds.asp?id=659.
            
            Usage:
            
            	AdoNetOdbcUpdater upd = new AdoNetOdbcUpdater( Settings.HostDBString );
            	DataRow row;
            	if ( wantToAddNew )
            	{
            		upd.Open( "SELECT TOP 1 * FROM MyTable" );
            		row = upd.AddNewRow();
            	}
            	else
            	{
            		upd.Open( "SELECT TOP 1 * FROM MyTable WHERE ID=" + someIDOfMine );
            		row = upd.Row;
            	}
            
            	row["xxx"] = yyy;
            	row["xxx"] = yyy;
            	...
            
            	int myID = upd.Update();
            
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.
            - "cacheSqlEnabled": Turn caching of SQL statements and their result inside
            the ASP.NET web cache on/off.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.#ctor">
            <summary>
            Default constructor.
            Uses the default connection string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.#ctor(System.String)">
            <summary>
            Constructor that executes a SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.#ctor(System.String,System.String)">
            <summary>
            Constructor that executes a SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.#ctor(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.#ctor(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Open(System.String)">
            <summary>
            Open the given SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Open(System.String,System.String)">
            <summary>
            Open the given SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Open(System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Open(System.String,System.String,ZetaLib.Core.Data.AdoNetOdbcParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.NewRow">
            <summary>
            Creates a new row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.AddRow(System.Data.DataRow)">
            <summary>
            Adds a row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <param name="row">The row, previously created with NewRow(),
            to add in memory.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.AddNewRow">
            <summary>
            Adds a row in memory and returns the new row.
            This function combines the NewRow() and AddRow( row )
            functions.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.CheckGetOrAddNewRow">
            <summary>
            Either returns the current row, if available,
            or adds a new row if not available.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the row.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.DetectTableName(System.String)">
            <summary>
            Tries to parse the name of a table from a given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to parse.</param>
            <returns>Returns the name of the table if found,
            returns NULL if not found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.GetIdentity">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.GetIdentity(System.Data.Odbc.OdbcConnection)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.GetIdentity(System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.GetIdentity(System.Data.Odbc.OdbcConnection,System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.ConnectionString">
            <summary>
            The connection string that is used to query
            the database.
            The default value is automatically read from the
            "connectionString" app value of the config file,
            if present.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.Connection">
            <summary>
            The underlying Connection object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.DataAdapter">
            <summary>
            The underlying DataAdapter object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.DataSet">
            <summary>
            The underlying DataSet object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.Table">
            <summary>
            The underlying DataTable object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.CommandBuilder">
            <summary>
            The underlying CommandBuilder object.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update(ZetaLib.Core.Data.AdoNetOdbcUpdater.IdentityControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update(ZetaLib.Core.Data.AdoNetOdbcUpdater.IdentityControl,System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="CacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled</param>
            <param name="CacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update(ZetaLib.Core.Data.AdoNetOdbcUpdater.IdentityControl,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <param name="CacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update(ZetaLib.Core.Data.AdoNetOdbcUpdater.IdentityControl,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="CacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update">
            <summary>
            Write any changes to database.
            </summary>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Update(System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.DataAdapter_RowUpdated(System.Object,System.Data.Odbc.OdbcRowUpdatedEventArgs)">
            <summary>
            See http://www.codeproject.com/cs/database/relationaladonet.asp.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.TableName">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.SqlQuery">
            <summary>
            Remembered query in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.SqlCommand">
            <summary>
            Remembered comand in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.LastIdentityValue">
            <summary>
            Used for MS Access databases.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.TraceUpdateSql(System.String,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.TraceUpdateSqlError(System.String,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.TraceUpdateSql(System.Data.Odbc.OdbcCommand,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOdbcUpdater.TraceUpdateSqlError(System.Data.Odbc.OdbcCommand,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcUpdater.Item(System.Int32)">
            <summary>
            Access a ROW of the current queried table (if any).
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOdbcUpdater.Row">
            <summary>
            Returns the first row of the current table.
            Usually, you only need the first row.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOdbcUpdater.IdentityControl">
            <summary>
            Tells what to do during an update with identity fields.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.IdentityControl.Get">
            <summary>
            Read the identity field after the table got updated.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOdbcUpdater.IdentityControl.DontGet">
            <summary>
            Don't read the identity field after the update.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOleDBCache">
            <summary>
            The main cache class.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOleDBHelper">
            <summary>
            Helper class with statics, dealing with databases.
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.
            - "cacheSqlEnabled": Turn caching of SQL statements and their result inside
            the ASP.NET web cache on/off.
            - "commandTimeoutSeconds": Define an optional timeout for a command to execute.
            Please note that this parameter is different from the connection timeout which
            can be defined inside the connection string.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String,System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String,System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteForUpdate(System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteForUpdate(System.String,System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteForUpdate(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.ExecuteForUpdate(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GetTableSchema(System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tablename">The name of the table.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GetTableSchema(System.String,System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tablename">The name of the table.</param>
            <param name="connectionString">The connection string used to connect.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GetTableNames">
            <summary>
            Read all the table names of the current connection string.
            </summary>
            <returns>Returns a list of table names or NULL if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GetTableNames(System.String)">
            <summary>
            Read all the table names of the given connection string.
            </summary>
            <param name="connectionString">The connection string used to connect.</param>
            <returns>Returns a list of table names or NULL if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.CheckSetCommandTimeout(System.Data.OleDb.OleDbCommand)">
            <summary>
            If the configuration file specifies a command timeout,
            set it now.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.CompactJetDatabase">
            <summary>
            Compacts the Microsoft Access database of the current connection string.
            Only call if you are sure that the connection string contains
            a connection to a Microsoft Access database.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.CompactJetDatabase(System.String)">
            <summary>
            Compacts a Microsoft Access database at a given path.
            </summary>
            <param name="sourceFilePath">The file path to the Microsoft Access
            database file (.MDB). The original database file will be overwritten
            with the compacted database file.</param>
            <remarks>Be sure that the database file to compact is closed and
            no other user is accessing it during compacting.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.CompactJetDatabase(System.String,System.String)">
            <summary>
            Compacts a Microsoft Access database at a given path and stores
            the newly compacted database at a new location.
            </summary>
            <param name="sourceFilePath">The file path to the Microsoft Access
            database file (.MDB). The file will not be modified.</param>
            <param name="destinationFilePath">The file path of the new database file 
            that will be created.</param>
            <remarks>Be sure that the database file to compact is closed and
            no other user is accessing it during compacting.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GenerateJetConnectionString(System.String)">
            <summary>
            Helper class for building a connection string for compacting
            a Microsoft Access database.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GetIdentity(System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="tablename">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GetIdentity(System.String,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="connectionString">The connection string being used to 
            query for the identity value.</param>
            <param name="tablename">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBHelper.GetIdentity(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tablename">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOleDBParamCollection">
            <summary>
            Because OleDbParameterCollection cannot be instantiated,
            this class mimics the required operations of OleDbParameterCollection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="size"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CreateParameter(System.String,System.Object,System.Int32,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.#ctor(System.Data.OleDb.OleDbParameter[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Add(System.Data.OleDb.OleDbParameter)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBParamCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBParamCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBParamCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBParamCollection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBParamCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOleDBUpdater">
            <summary>
            Class that simplifies the adding/updating of recordsets with ADO.NET.
            See also: http://nisos/zkb/pages/ds.asp?id=659.
            
            Usage:
            
            	using ( AdoNetOleDBUpdater upd = new AdoNetOleDBUpdater( Settings.HostDBString ) )
            	{
            		DataRow row;
            		if ( wantToAddNew )
            		{
            			upd.Open( "SELECT TOP 1 * FROM MyTable" );
            			row = upd.AddNewRow();
            		}
            		else
            		{
            			upd.Open( "SELECT TOP 1 * FROM MyTable WHERE ID=" + someIDOfMine );
            			row = upd.Row;
            		}
            	
            		row["xxx"] = yyy;
            		row["xxx"] = yyy;
            		...
            
            		int myID = upd.Update();
            	}
            	
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.
            - "cacheSqlEnabled": Turn caching of SQL statements and their result inside
            the ASP.NET web cache on/off.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.#ctor">
            <summary>
            Default constructor.
            Uses the default connection string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.#ctor(System.String)">
            <summary>
            Constructor that executes a SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.#ctor(System.String,System.String)">
            <summary>
            Constructor that executes a SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.#ctor(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.#ctor(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Open(System.String)">
            <summary>
            Open the given SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Open(System.String,System.String)">
            <summary>
            Open the given SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Open(System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Open(System.String,System.String,ZetaLib.Core.Data.AdoNetOleDBParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.NewRow">
            <summary>
            Creates a new row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.AddRow(System.Data.DataRow)">
            <summary>
            Adds a row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <param name="row">The row, previously created with NewRow(),
            to add in memory.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.AddNewRow">
            <summary>
            Adds a row in memory and returns the new row.
            This function combines the NewRow() and AddRow( row )
            functions.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.CheckGetOrAddNewRow">
            <summary>
            Either returns the current row, if available,
            or adds a new row if not available.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the row.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.DetectTableName(System.String)">
            <summary>
            Tries to parse the name of a table from a given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to parse.</param>
            <returns>Returns the name of the table if found,
            returns NULL if not found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.GetIdentity">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.GetIdentity(System.Data.OleDb.OleDbConnection)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.GetIdentity(System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.GetIdentity(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update(ZetaLib.Core.Data.AdoNetOleDBUpdater.IdentityControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update(ZetaLib.Core.Data.AdoNetOleDBUpdater.IdentityControl,System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update(ZetaLib.Core.Data.AdoNetOleDBUpdater.IdentityControl,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update(ZetaLib.Core.Data.AdoNetOleDBUpdater.IdentityControl,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update">
            <summary>
            Write any changes to database.
            </summary>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Update(System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.DataAdapter_RowUpdated(System.Object,System.Data.OleDb.OleDbRowUpdatedEventArgs)">
            <summary>
            See http://www.codeproject.com/cs/database/relationaladonet.asp.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.tableName">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.sqlQuery">
            <summary>
            Remembered query in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.sqlCommand">
            <summary>
            Remembered comand in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.lastIdentityValue">
            <summary>
            Used for MS Access databases.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.connectionString">
            <summary>
            The connection string that is used to query
            the database.
            The default value is automatically read from the
            "connectionString" app value of the config file,
            if present.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.connection">
            <summary>
            The underlying Connection object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.dataAdapter">
            <summary>
            The underlying DataAdapter object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.dataSet">
            <summary>
            The underlying DataSet object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.commandBuilder">
            <summary>
            The underlying CommandBuilder object.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.TraceUpdateSql(System.String,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.TraceUpdateSqlError(System.String,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.TraceUpdateSql(System.Data.OleDb.OleDbCommand,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOleDBUpdater.TraceUpdateSqlError(System.Data.OleDb.OleDbCommand,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.Item(System.Int32)">
            <summary>
            Access a ROW of the current queried table (if any).
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.Table">
            <summary>
            The underlying DataTable object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.Row">
            <summary>
            Returns the first row of the current table.
            Usually, you only need the first row.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.ConnectionString">
            <summary>
            The connection string that is used to query
            the database.
            The default value is automatically read from the
            "connectionString" app value of the config file,
            if present.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.Connection">
            <summary>
            The underlying Connection object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.DataAdapter">
            <summary>
            The underlying DataAdapter object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.DataSet">
            <summary>
            The underlying DataSet object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOleDBUpdater.CommandBuilder">
            <summary>
            The underlying CommandBuilder object.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOleDBUpdater.IdentityControl">
            <summary>
            Tells what to do during an update with identity fields.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.IdentityControl.Get">
            <summary>
            Read the identity field after the table got updated.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOleDBUpdater.IdentityControl.DontGet">
            <summary>
            Don't read the identity field after the update.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOracleCache">
            <summary>
            The main cache class.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOracleHelper">
            <summary>
            Helper class with statics, dealing with databases.
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.
            - "cacheSqlEnabled": Turn caching of SQL statements and their result inside
            the ASP.NET web cache on/off.
            - "commandTimeoutSeconds": Define an optional timeout for a command to execute.
            Please note that this parameter is different from the connection timeout which
            can be defined inside the connection string.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String,System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String,System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteForUpdate(System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteForUpdate(System.String,System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteForUpdate(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.ExecuteForUpdate(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.GetDatabaseTables">
            <summary>
            Get a list of all tables (NO views!) inside the given database.
            </summary>
            <remarks>See also: http://msdn.microsoft.com/library/en-us/cpguide/html/cpconobtainingschemainformationfromdatabase.asp</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.GetDatabaseTables(System.String)">
            <summary>
            Get a list of all tables (NO views!) inside the given database.
            </summary>
            <remarks>See also: http://msdn.microsoft.com/library/en-us/cpguide/html/cpconobtainingschemainformationfromdatabase.asp</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.GetTableSchema(System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.GetTableSchema(System.String,System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="connectionString">The connection string used to connect.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.CheckSetCommandTimeout(System.Data.OracleClient.OracleCommand)">
            <summary>
            If the configuration file specifies a command timeout,
            set it now.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.GetIdentity(System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="tableName">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.GetIdentity(System.String,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="connectionString">The connection string being used to 
            query for the identity value.</param>
            <param name="tableName">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleHelper.GetIdentity(System.Data.OracleClient.OracleConnection,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tableName">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOracleParamCollection">
            <summary>
            Because OracleParameterCollection cannot be instantiated,
            this class mimics the required operations of OracleParameterCollection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.#ctor(System.Data.OracleClient.OracleParameter[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleParamCollection.Add(System.Data.OracleClient.OracleParameter)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleParamCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleParamCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleParamCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleParamCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleParamCollection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleParamCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOracleUpdater">
            <summary>
            Class that simplifies the adding/updating of recordsets with ADO.NET.
            See also: http://nisos/zkb/pages/ds.asp?id=659.
            
            Usage:
            
            	AdoNetOracleUpdater upd = new AdoNetOracleUpdater( Settings.HostDBString );
            	DataRow row;
            	if ( wantToAddNew )
            	{
            		upd.Open( "SELECT TOP 1 * FROM MyTable" );
            		row = upd.AddNewRow();
            	}
            	else
            	{
            		upd.Open( "SELECT TOP 1 * FROM MyTable WHERE ID=" + someIDOfMine );
            		row = upd.Row;
            	}
            
            	row["xxx"] = yyy;
            	row["xxx"] = yyy;
            	...
            
            	int myID = upd.Update();
            
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.#ctor">
            <summary>
            Default constructor.
            Uses the default connection string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.#ctor(System.String)">
            <summary>
            Constructor that executes a SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.#ctor(System.String,System.String)">
            <summary>
            Constructor that executes a SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.#ctor(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.#ctor(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Open(System.String)">
            <summary>
            Open the given SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Open(System.String,System.String)">
            <summary>
            Open the given SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Open(System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Open(System.String,System.String,ZetaLib.Core.Data.AdoNetOracleParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.NewRow">
            <summary>
            Creates a new row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.AddRow(System.Data.DataRow)">
            <summary>
            Adds a row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <param name="row">The row, previously created with NewRow(),
            to add in memory.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.AddNewRow">
            <summary>
            Adds a row in memory and returns the new row.
            This function combines the NewRow() and AddRow( row )
            functions.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.CheckGetOrAddNewRow">
            <summary>
            Either returns the current row, if available,
            or adds a new row if not available.
            Only works if the Open function was called or
            a query/stored procedure was specified in the constructor.
            </summary>
            <returns>Returns the row.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.DetectTableName(System.String)">
            <summary>
            Tries to parse the name of a table from a given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to parse.</param>
            <returns>Returns the name of the table if found,
            returns NULL if not found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.GetIdentity">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.GetIdentity(System.Data.OracleClient.OracleConnection)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.GetIdentity(System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.GetIdentity(System.Data.OracleClient.OracleConnection,System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.ConnectionString">
            <summary>
            The connection string that is used to query
            the database.
            The default value is automatically read from the
            "connectionString" app value of the config file,
            if present.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.Connection">
            <summary>
            The underlying Connection object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.DataAdapter">
            <summary>
            The underlying DataAdapter object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.DataSet">
            <summary>
            The underlying DataSet object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.Table">
            <summary>
            The underlying DataTable object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.CommandBuilder">
            <summary>
            The underlying CommandBuilder object.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update(ZetaLib.Core.Data.AdoNetOracleUpdater.IdentityControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update(ZetaLib.Core.Data.AdoNetOracleUpdater.IdentityControl,System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update(ZetaLib.Core.Data.AdoNetOracleUpdater.IdentityControl,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update(ZetaLib.Core.Data.AdoNetOracleUpdater.IdentityControl,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update">
            <summary>
            Write any changes to database.
            </summary>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Update(System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.TableName">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.SqlQuery">
            <summary>
            Remembered query in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.OracleCommand">
            <summary>
            Remembered comand in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.TraceUpdateSql(System.String,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.TraceUpdateSqlError(System.String,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.TraceUpdateSql(System.Data.OracleClient.OracleCommand,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetOracleUpdater.TraceUpdateSqlError(System.Data.OracleClient.OracleCommand,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleUpdater.Item(System.Int32)">
            <summary>
            Access a ROW of the current queried table (if any).
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetOracleUpdater.Row">
            <summary>
            Returns the first row of the current table.
            Usually, you only need the first row.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetOracleUpdater.IdentityControl">
            <summary>
            Tells what to do during an update with identity fields.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.IdentityControl.Get">
            <summary>
            Read the identity field after the table got updated.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetOracleUpdater.IdentityControl.DontGet">
            <summary>
            Don't read the identity field after the update.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetSqlCache">
            <summary>
            The main cache class.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetSqlHelper">
            <summary>
            Helper class with statics, dealing with databases.
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.
            - "cacheSqlEnabled": Turn caching of SQL statements and their result inside
            the ASP.NET web cache on/off.
            - "commandTimeoutSeconds": Define an optional timeout for a command to execute.
            Please note that this parameter is different from the connection timeout which
            can be defined inside the connection string.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.Execute(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataSet.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataSet or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,System.Int32)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteTable(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,System.Int32,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataTable.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="startIndex"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataTable or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String,System.String)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteRow(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a DataRow.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the DataRow or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String,System.String)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteValue(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for a single value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns>Returns the value or NULL if no data is found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteNonQuery(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Execute a query without returning a value.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <param name="cacheControl"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteForUpdate(System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteForUpdate(System.String,System.String)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteForUpdate(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.ExecuteForUpdate(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Query for an updatable DataAdapter.
            </summary>
            <param name="connectionString"></param>
            <param name="spName"></param>
            <param name="spParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.GetDatabaseTables">
            <summary>
            Get a list of all tables (NO views!) inside the given database.
            </summary>
            <remarks>See also: http://msdn.microsoft.com/library/en-us/cpguide/html/cpconobtainingschemainformationfromdatabase.asp</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.GetDatabaseTables(System.String)">
            <summary>
            Get a list of all tables (NO views!) inside the given database.
            </summary>
            <remarks>See also: http://msdn.microsoft.com/library/en-us/cpguide/html/cpconobtainingschemainformationfromdatabase.asp</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.GetTableSchema(System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.GetTableSchema(System.String,System.String)">
            <summary>
            Read schema information for a given database table.
            Is especially useful for checking the size of a varchar column against
            the size of a string the user is about to store.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="connectionString">The connection string used to connect.</param>
            <returns>Returns a collection of schema columns.</returns>
            <remarks>See also: http://google_de/search?q=cache:5AcY7whKMkgC:www.dotnet247.com/247reference/msgs/23/118660.aspx+ado.net+column+size. </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.CheckSetCommandTimeout(System.Data.SqlClient.SqlCommand)">
            <summary>
            If the configuration file specifies a command timeout,
            set it now.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.GetIdentity(System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="tableName">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.GetIdentity(System.String,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="connectionString">The connection string being used to 
            query for the identity value.</param>
            <param name="tableName">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlHelper.GetIdentity(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Get the identity field value.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tableName">The table name, as a hint to the retrieval function.</param>
            <returns>Returns the identity, if retrievable, ob 0 if none.</returns>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetSqlParamCollection">
            <summary>
            Because SqlParameterCollection cannot be instantiated,
            this class mimics the required operations of SqlParameterCollection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="size"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object,System.Int32)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CreateParameter(System.String,System.Object,System.Int32,ZetaLib.Core.Data.NullBehaviour)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="nullBehaviour"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.#ctor(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlParamCollection.Add(System.Data.SqlClient.SqlParameter)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlParamCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlParamCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlParamCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlParamCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlParamCollection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlParamCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetSqlUpdater">
            <summary>
            Class that simplifies the adding/updating of recordsets with ADO.NET.
            See also: http://nisos/zkb/pages/ds.asp?id=659.
            
            Usage:
            
            	AdoNetSqlUpdater upd = new AdoNetSqlUpdater( Settings.HostDBString );
            	DataRow row;
            	if ( wantToAddNew )
            	{
            		upd.Open( "SELECT TOP 1 * FROM MyTable" );
            		row = upd.AddNewRow();
            	}
            	else
            	{
            		upd.Open( "SELECT TOP 1 * FROM MyTable WHERE ID=" + someIDOfMine );
            		row = upd.Row;
            	}
            
            	row["xxx"] = yyy;
            	row["xxx"] = yyy;
            	...
            
            	int myID = upd.Update();
            
            </summary>
            <remarks>Parameters in the application configuration file (e.g. "web.config)":
            - "connectionString": The connection string for connecting to the database.
            - "traceSqlEnabled": Turn tracing of SQL statements to LOG4NET on/off.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.#ctor">
            <summary>
            Default constructor.
            Uses the default connection string.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.#ctor(System.String)">
            <summary>
            Constructor that executes a SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.#ctor(System.String,System.String)">
            <summary>
            Constructor that executes a SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.#ctor(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.#ctor(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Constructor that executes a SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Open(System.String)">
            <summary>
            Open the given SQL query.
            Uses the default connection string.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Open(System.String,System.String)">
            <summary>
            Open the given SQL query.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="sqlQuery">The SQL query to execute.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Open(System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            Uses the default connection string.
            </summary>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Open(System.String,System.String,ZetaLib.Core.Data.AdoNetSqlParamCollection)">
            <summary>
            Opens the given SQL stored procedure.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <param name="spName"></param>
            <param name="spParameters"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.NewRow">
            <summary>
            Creates a new row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.AddRow(System.Data.DataRow)">
            <summary>
            Adds a row in memory.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <param name="row">The row, previously created with NewRow(),
            to add in memory.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.AddNewRow">
            <summary>
            Adds a row in memory and returns the new row.
            This function combines the NewRow() and AddRow( row )
            functions.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
            <returns>Returns the new row. The row is now added yet.
            You must call AddRow( row ) by yourself.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.CheckGetOrAddNewRow">
            <summary>
            Either returns the current row, if available,
            or adds a new row if not available.
            Only works if the Open function was called or
            a query/stored procedure was specified in the constructor.
            </summary>
            <returns>Returns the row.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.DetectTableName(System.String)">
            <summary>
            Tries to parse the name of a table from a given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to parse.</param>
            <returns>Returns the name of the table if found,
            returns NULL if not found.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.GetIdentity">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.GetIdentity(System.Data.SqlClient.SqlConnection)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.GetIdentity(System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.GetIdentity(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Detectes the identity. Call this function after
            the Update() function returned successfully.
            </summary>
            <param name="conn">The connection used to query
            for the identity value.</param>
            <param name="tablename">The table name, as a hint,
            if auto-detection of the table name fails. This parameter usually
            is required if the SQL query that was used to open the database,
            was an EXECUTE of a stored procedure.</param>
            <returns>Returns the identity, if any.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update(ZetaLib.Core.Data.AdoNetSqlUpdater.IdentityControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update(ZetaLib.Core.Data.AdoNetSqlUpdater.IdentityControl,System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update(ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update(System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update(ZetaLib.Core.Data.AdoNetSqlUpdater.IdentityControl,System.String,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update(ZetaLib.Core.Data.AdoNetSqlUpdater.IdentityControl,ZetaLib.Core.Data.CacheControl)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="identityControl">Specify whether you want to try to get the 
            identity value (if any) of the inserted row.</param>
            <param name="cacheControl">Specifies how the cache should
            be handled.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update">
            <summary>
            Write any changes to database.
            </summary>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Update(System.String)">
            <summary>
            Write any changes to database.
            </summary>
            <param name="hintTableName">If the tablename could not be automatically
            detected, use this parameter to specify the table name
            to get the identity from (e.g. useful when this class was filled
            by a stored procedure.</param>
            <returns>Returns the identity (if requested and possible) 
            or 0 if unavailable or not retrievable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.tableName">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.sqlQuery">
            <summary>
            Remembered query in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.sqlCommand">
            <summary>
            Remembered comand in Open() for logging errors in Update().
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.connectionString">
            <summary>
            The connection string that is used to query
            the database.
            The default value is automatically read from the
            "connectionString" app value of the config file,
            if present.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.connection">
            <summary>
            The underlying Connection object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.dataAdapter">
            <summary>
            The underlying DataAdapter object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.dataSet">
            <summary>
            The underlying DataSet object.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.commandBuilder">
            <summary>
            The underlying CommandBuilder object.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.TraceUpdateSql(System.String,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.TraceUpdateSqlError(System.String,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.TraceUpdateSql(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.AdoNetSqlUpdater.TraceUpdateSqlError(System.Data.SqlClient.SqlCommand,System.Exception)">
            <summary>
            Trace helper.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.Item(System.Int32)">
            <summary>
            Access a ROW of the current queried table (if any).
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.Table">
            <summary>
            The underlying DataTable object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.Row">
            <summary>
            Returns the first row of the current table.
            Usually, you only need the first row.
            Only works if the Open function was called or
            a query was specified in the constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.ConnectionString">
            <summary>
            The connection string that is used to query
            the database.
            The default value is automatically read from the
            "connectionString" app value of the config file,
            if present.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.Connection">
            <summary>
            The underlying Connection object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.DataAdapter">
            <summary>
            The underlying DataAdapter object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.DataSet">
            <summary>
            The underlying DataSet object.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Data.AdoNetSqlUpdater.CommandBuilder">
            <summary>
            The underlying CommandBuilder object.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.AdoNetSqlUpdater.IdentityControl">
            <summary>
            Tells what to do during an update with identity fields.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.IdentityControl.Get">
            <summary>
            Read the identity field after the table got updated.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.Data.AdoNetSqlUpdater.IdentityControl.DontGet">
            <summary>
            Don't read the identity field after the update.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Data.DBHelper">
            <summary>
            Miscellaneous functions for helping with databases.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.FormatSqlDate(System.DateTime)">
            <summary>
            Formats a DateTime value so that it can be used direclty inside
            a SQL query.
            Formats only the date portion.
            </summary>
            <param name="dateToFormat">The date to format.</param>
            <returns>The ready-to-use SQL string.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.EscapeSql(System.String)">
            <summary>
            Escapes special SQL characters, so that they can be safely passed to a
            SQL query.
            </summary>
            <param name="sql">The unescaped text to escape.</param>
            <returns>Returns the escaped text.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.DemalifySearchTerm(System.String)">
            <summary>
            Tries to remove all malicious SQL code constructs from a search term
            that usually the user enteres through a web form fieldValue.
            Use this function before passing any search keywords to a SQL query.
            </summary>
            <param name="keyword">The keyword(s) that the user entered.</param>
            <returns>Returns the ready-to-use, safe, keyword(s).</returns>
            <remarks>See: http://www.codeproject.com/aspnet/search.asp </remarks>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Byte[]@,System.Object)">
            <summary>
            Read a value from the database.
            Use this overload for SQL-'timestamp' fields.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Guid@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Int32@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Double@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.String@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Decimal@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Object@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.DateTime@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Boolean@,System.Object)">
            <summary>
            Read a value from the database.
            </summary>
            <param name="readValue">The value read and to return. 
            Returns a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</param>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Object,System.Int32)">
            <summary>
            Read a value from the database. Provide a default value if not
            readable, e.g. if NULL or <code>DBNull.Value</code>.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <param name="defaultValue">The value to return if the field
            to read from is not readable or is NULL or <code>DBNull.value</code>.</param>
            <returns>Returns the read value or the default value if not readable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Object,System.String)">
            <summary>
            Read a value from the database. Provide a default value if not
            readable, e.g. if NULL or <code>DBNull.Value</code>.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <param name="defaultValue">The value to return if the field
            to read from is not readable or is NULL or <code>DBNull.value</code>.</param>
            <returns>Returns the read value or the default value if not readable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Object,System.Boolean)">
            <summary>
            Read a value from the database. Provide a default value if not
            readable, e.g. if NULL or <code>DBNull.Value</code>.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <param name="defaultValue">The value to return if the field
            to read from is not readable or is NULL or <code>DBNull.value</code>.</param>
            <returns>Returns the read value or the default value if not readable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadField(System.Object,System.DateTime)">
            <summary>
            Read a value from the database. Provide a default value if not
            readable, e.g. if NULL or <code>DBNull.Value</code>.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <param name="defaultValue">The value to return if the field
            to read from is not readable or is NULL or <code>DBNull.value</code>.</param>
            <returns>Returns the read value or the default value if not readable.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldByteArray(System.Object)">
            <summary>
            Read a GUID value from the database.
            Use this for SQL-'timestamp' fields.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldGuid(System.Object)">
            <summary>
            Read a GUID value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldInteger(System.Object)">
            <summary>
            Read an integer value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldDouble(System.Object)">
            <summary>
            Read an double value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldString(System.Object)">
            <summary>
            Read a string value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldDecimal(System.Object)">
            <summary>
            Read a decimal value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldObject(System.Object)">
            <summary>
            Read an object value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldDateTime(System.Object)">
            <summary>
            Read a DateTime value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.ReadFieldBoolean(System.Object)">
            <summary>
            Read a boolean value from the database.
            </summary>
            <param name="fieldValue">The object to read from. 
            Usually something like <code>row["MyField"]</code>.</param>
            <returns>Returns the read value or a default value if not readable, 
            e.g. if NULL or <code>DBNull.Value</code>.</returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Guid)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Int32)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.String)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Decimal)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Double)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.DateTime)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Boolean)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Object)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Guid,System.Object@)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Int32,System.Object@)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.String,System.Object@)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Decimal,System.Object@)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Double,System.Object@)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.DateTime,System.Object@)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteField(System.Boolean,System.Object@)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldGuid(System.Guid)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldInteger(System.Int32)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldInteger(System.String)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldULong(System.Int32)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldDouble(System.Double)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldGuid(System.Guid,System.Guid,System.Object)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="ifThis"></param>
            <param name="thenThis"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldInteger(System.Int32,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <param name="ifThis"></param>
            <param name="thenThis"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldString(System.String)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldDecimal(System.Decimal)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldObject(System.Object)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldDateTime(System.DateTime)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZetaLib.Core.Data.DBHelper.WriteFieldBoolean(System.Boolean)">
            <summary>
            
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:ZetaLib.Core.Misc.FileExtensionRegistration">
            <summary>
            Class for registering ("associating") a file extension with 
            a given application.
            </summary>
            <remarks>For various implementations, see 
            http://www.google.com/search?q=Associate+File+Extension at Google.</remarks>
        </member>
        <member name="M:ZetaLib.Core.Misc.FileExtensionRegistration.Register(ZetaLib.Core.Misc.FileExtensionRegistration.RegistrationInformation)">
            <summary>
            Registers the given extension with the given application.
            </summary>
            <param name="info">Information about the extension to
            register. All properties of the information class must have
            been filled before passing to this function.</param>
        </member>
        <member name="M:ZetaLib.Core.Misc.FileExtensionRegistration.Unregister(ZetaLib.Core.Misc.FileExtensionRegistration.RegistrationInformation)">
            <summary>
            Removes a previously registered file extension.
            </summary>
            <param name="info">Information about the extension to
            unregister. All properties of the information class must have
            been filled before passing to this function.</param>
        </member>
        <member name="M:ZetaLib.Core.Misc.FileExtensionRegistration.SHChangeNotify(System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            P/Invoke.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.Misc.FileExtensionRegistration.RegistrationInformation">
            <summary>
            Information class for registering.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.Misc.FileExtensionRegistration.RegistrationInformation.Extension">
            <summary>
            The file extension to register.
            </summary>
            <example>For example ".cad".</example>
        </member>
        <member name="P:ZetaLib.Core.Misc.FileExtensionRegistration.RegistrationInformation.ClassName">
            <summary>
            The class name of the application to register.
            </summary>
            <example>For example "MyCadDoc".</example>
        </member>
        <member name="P:ZetaLib.Core.Misc.FileExtensionRegistration.RegistrationInformation.Description">
            <summary>
            The description of the file type.
            </summary>
            <example>For example "CAD document".</example>
        </member>
        <member name="P:ZetaLib.Core.Misc.FileExtensionRegistration.RegistrationInformation.ApplicationFilePath">
            <summary>
            The application that handles the file extension.
            </summary>
            <example>For example "C:\Cad\MyCad.exe".</example>
        </member>
        <member name="T:ZetaLib.Core.LibraryConfiguration">
            <summary>
            Central class for managing all configuration aspects of the library.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfiguration.Initialize">
            <summary>
            Initialize this library.
            Please ensure to call this function once at the very start of your 
            application, before doing any logging functions. A good place 
            would be inside the Main() method or GLOBAL.ASAX file.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Loads this class form the given configuration node.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.LibraryConfiguration.libraryInitialisator">
            <summary>
            Doing new initialization.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.Current">
            <summary>
            Singleton access to the library configuratin.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.Database">
            <summary>
            The database configuration.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.Web">
            <summary>
            The web configuration.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.DisableLoggingPasswordProtection">
            <summary>
            Configure to turn off protection of passwords
            stored inside the logfile.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.AdministratorEMailAddress">
            <summary>
            The e-mail address of an administrator.
            Can be NULL.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.SmtpServer">
            <summary>
            The server used to send e-mail messages via SMTP.
            Can be NULL.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.SmtpServerPort">
            <summary>
            The server port used to send e-mail messages via SMTP.
            Is zero if not assigned.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.WebProxy">
            <summary>
            Get the web proxy settings. If no web proxy is configured
            in the configuration file, the default Internet Explorer 
            proxy settings are returned.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration">
            <summary>
            Configuration of the database.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.#ctor">
            <summary>
            Constructor. Creates empty.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.#ctor(System.String,System.Int32,ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.DatabaseCacheSqlBehavior,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.ConnectionString">
            <summary>
            The connection string to the database.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.CommandTimeoutSeconds">
            <summary>
            The timeout for commands in seconds.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.CacheSqlBehavior">
            <summary>
            Whether SQL-statements and their results
            should be cached.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.TraceSqlEnabled">
            <summary>
            Whether SQL-statements should be traced.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.DatabaseCacheSqlBehavior">
            <summary>
            How caching of SQL statements is being handled.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.DatabaseCacheSqlBehavior.On">
            <summary>
            The cache is active.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.DatabaseCacheSqlBehavior.Off">
            <summary>
            The cache is inactive.
            </summary>
        </member>
        <member name="F:ZetaLib.Core.LibraryConfiguration.DatabaseConfiguration.DatabaseCacheSqlBehavior.Partially">
            <summary>
            The cache is partially active.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.LibraryConfiguration.WebConfiguration">
            <summary>
            Configuration of the web.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfiguration.WebConfiguration.#ctor">
            <summary>
            Constructor. Creates empty.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfiguration.WebConfiguration.#ctor(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.WebConfiguration.UseServerSideViewState">
            <summary>
            Whether to use a server-side viewstate instead
            of a client-side viewstate.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.WebConfiguration.ReplaceTildeFallback">
            <summary>
            The string that is used when replacing a tilde
            and the result cannot be resolved.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.WebConfiguration.ReplaceTildeCompleteFallback">
            <summary>
            The string that is used when replacing a tilde
            and the result cannot be resolved.
            </summary>
        </member>
        <member name="P:ZetaLib.Core.LibraryConfiguration.WebConfiguration.UseCustomErrors">
            <summary>
            Whether to display custom errors on
            web pages.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.LibraryConfiguration.LibraryInitialisator">
            <summary>
            Helper class for initialising the library.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfiguration.LibraryInitialisator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:ZetaLib.Core.LibraryConfigurationSectionHandler">
            <summary>
            Read the configuration.
            See http://support.microsoft.com/?kbid=309045.
            </summary>
        </member>
        <member name="M:ZetaLib.Core.LibraryConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
    </members>
</doc>
